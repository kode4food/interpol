module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          "for",
          { type: "literal", value: "for", description: "\"for\"" },
          void 0,
          function() { return 'fr'; },
          "def",
          { type: "literal", value: "def", description: "\"def\"" },
          function() { return 'de'; },
          "from",
          { type: "literal", value: "from", description: "\"from\"" },
          function() { return 'im'; },
          "import",
          { type: "literal", value: "import", description: "\"import\"" },
          "export",
          { type: "literal", value: "export", description: "\"export\"" },
          function() { return 'ex'; },
          "let",
          { type: "literal", value: "let", description: "\"let\"" },
          function() { return 'as'; },
          "and",
          { type: "literal", value: "and", description: "\"and\"" },
          function() { return 'an'; },
          "or",
          { type: "literal", value: "or", description: "\"or\"" },
          function() { return 'or'; },
          "like",
          { type: "literal", value: "like", description: "\"like\"" },
          function() { return 'ma'; },
          "lt",
          { type: "literal", value: "lt", description: "\"lt\"" },
          function() { return 'lt'; },
          "gt",
          { type: "literal", value: "gt", description: "\"gt\"" },
          function() { return 'gt'; },
          "mod",
          { type: "literal", value: "mod", description: "\"mod\"" },
          function() { return 'mo'; },
          "self",
          { type: "literal", value: "self", description: "\"self\"" },
          function() { return 'se'; },
          "not",
          { type: "literal", value: "not", description: "\"not\"" },
          function() { return 'no'; },
          "nil",
          { type: "literal", value: "nil", description: "\"nil\"" },
          function() { return undefined; },
          "if",
          { type: "literal", value: "if", description: "\"if\"" },
          function() { return true; },
          "unless",
          { type: "literal", value: "unless", description: "\"unless\"" },
          function() { return false; },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          "as",
          { type: "literal", value: "as", description: "\"as\"" },
          "in",
          { type: "literal", value: "in", description: "\"in\"" },
          "else",
          { type: "literal", value: "else", description: "\"else\"" },
          "end",
          { type: "literal", value: "end", description: "\"end\"" },
          "le",
          { type: "literal", value: "le", description: "\"le\"" },
          "lte",
          { type: "literal", value: "lte", description: "\"lte\"" },
          function() { return 'le'; },
          "ge",
          { type: "literal", value: "ge", description: "\"ge\"" },
          "gte",
          { type: "literal", value: "gte", description: "\"gte\"" },
          function() { return 'ge'; },
          "when",
          { type: "literal", value: "when", description: "\"when\"" },
          "where",
          { type: "literal", value: "where", description: "\"where\"" },
          function(id) {
                return sym(id, 'id');
              },
          [],
          function(start, cont) {
                return start + cont.join('');
              },
          /^[$_a-zA-Z]/,
          { type: "class", value: "[$_a-zA-Z]", description: "[$_a-zA-Z]" },
          /^[$_a-zA-Z0-9]/,
          { type: "class", value: "[$_a-zA-Z0-9]", description: "[$_a-zA-Z0-9]" },
          function(start, cont) {
                return sym(start + cont.join(''), 'id');
              },
          /^[a-zA-Z]/,
          { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(chars) {
                return sym(chars.join(''), 'id');
              },
          /^[^\0-\x1F'"> \/=]/,
          { type: "class", value: "[^\\0-\\x1F'\"> \\/=]", description: "[^\\0-\\x1F'\"> \\/=]" },
          /^[dD]/,
          { type: "class", value: "[dD]", description: "[dD]" },
          /^[oO]/,
          { type: "class", value: "[oO]", description: "[oO]" },
          /^[cC]/,
          { type: "class", value: "[cC]", description: "[cC]" },
          /^[tT]/,
          { type: "class", value: "[tT]", description: "[tT]" },
          /^[yY]/,
          { type: "class", value: "[yY]", description: "[yY]" },
          /^[pP]/,
          { type: "class", value: "[pP]", description: "[pP]" },
          /^[eE]/,
          { type: "class", value: "[eE]", description: "[eE]" },
          function() { return "DOCTYPE"; },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          function(h, t) {
                return h + t.join('');
              },
          null,
          /^[\-+]/,
          { type: "class", value: "[\\-+]", description: "[\\-+]" },
          function(s, d) {
                return 'e' + (s ? s : '+') + d.join('');
              },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(d) {
                return '.' + d.join('');
              },
          function(c, f, e) {
                return sym(parseFloat(c + (f ? f : '') + (e ? e : '')), 'lit');
              },
          { type: "any", description: "any character" },
          /^[ \t\x0B\f]/,
          { type: "class", value: "[ \\t\\x0B\\f]", description: "[ \\t\\x0B\\f]" },
          /^[\n\r]/,
          { type: "class", value: "[\\n\\r]", description: "[\\n\\r]" },
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          "\"\"\"",
          { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
          function(c) { return c; },
          function(chars) {
                return symInterpolate(chars.join(''), true);
              },
          "'''",
          { type: "literal", value: "'''", description: "\"'''\"" },
          function(chars) {
                return symInterpolate(chars.join(''));
              },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          function() { return sym('', 'lit'); },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          function(c) { return symInterpolate(c.join(''), true); },
          function(c) { return symInterpolate(c.join('')); },
          /^[^"\\]/,
          { type: "class", value: "[^\"\\\\]", description: "[^\"\\\\]" },
          /^[^'\\]/,
          { type: "class", value: "[^'\\\\]", description: "[^'\\\\]" },
          "\\\\",
          { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
          function() { return "\\"; },
          "\\\"",
          { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
          function() { return '"'; },
          "\\'",
          { type: "literal", value: "\\'", description: "\"\\\\'\"" },
          function() { return "'"; },
          "\\b",
          { type: "literal", value: "\\b", description: "\"\\\\b\"" },
          function() { return "\b"; },
          "\\f",
          { type: "literal", value: "\\f", description: "\"\\\\f\"" },
          function() { return "\f"; },
          "\\n",
          { type: "literal", value: "\\n", description: "\"\\\\n\"" },
          function() { return "\n"; },
          "\\r",
          { type: "literal", value: "\\r", description: "\"\\\\r\"" },
          function() { return "\r"; },
          "\\t",
          { type: "literal", value: "\\t", description: "\"\\\\t\"" },
          function() { return "\t"; },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          function() { return 'eq'; },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          function() { return 'nq'; },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          function() { return 'ad'; },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          function() { return 'su'; },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          function() { return 'mu'; },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          function() { return 'di'; },
          function() { return 'ne'; },
          function() { return 'po'; },
          "@",
          { type: "literal", value: "@", description: "\"@\"" },
          function() { return 'bi'; },
          function() { return ' '; },
          function() { return '\n'; },
          function(s) {
                var res = s.join('');
                if ( !res.length ) {
                  return null;
                }
                return res.indexOf('\n') !== -1 ? '\n' : ' ';
             },
          function(s) { return s; },
          function(statements) {
                var results = [];
                for ( var i = 0, len = statements.length; i < len; i++ ) {
                  results.push.apply(results, statements[i][0]);
                  var ws = statements[i][1];
                  if ( ws && ws.length ) {
                    results.push([sym('ou'), sym(ws, 'lit')]);
                  }
                }
                return stmts(results);
              },
          function(s, ws) {
                return [[s], ws];
              },
          function(es) { return es; },
          function() { return null; },
          function(s, t) {
                if ( t ) {
                  return [[s, t], null];
                }
                return [[s], null];
              },
          "<!--",
          { type: "literal", value: "<!--", description: "\"<!--\"" },
          "-->",
          { type: "literal", value: "-->", description: "\"-->\"" },
          function(comment) {
                return [sym('ct'), sym(comment.join(''), 'lit')];
              },
          "<!",
          { type: "literal", value: "<!", description: "\"<!\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          function(rootElem) {
                return [sym('dt'), rootElem];
              },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          function(a) { return a; },
          function(tag, attrs, t) {
                return [sym('op'), tag, attrs, t];
              },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          function(expr) {
                return expr;
              },
          "/>",
          { type: "literal", value: "/>", description: "\"/>\"" },
          function() { return 1; },
          function() { return 0; },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          function(e) { return e; },
          function(name, value) {
                return [name, value === null ? sym(true, 'lit') : value];
              },
          "</",
          { type: "literal", value: "</", description: "\"</\"" },
          function(tag) {
                return [sym('cl'), tag];
              },
          function(g) { return g; },
          function(op, id, params, guard, statements) {
                params = params || {};
                var guards = params.guards || [];
                var i;
                var len;
                if ( guards.length ) {
                  if ( guard ) { guards.push(guard); }
                  guard = guards[0];
                  for ( i = 1, len = guards.length; i < len; i++ ) {
                    guard = [sym('an'), guard, guards[i]];
                  }
                }

                if ( guard ) {
                  return [sym(op), id, params.ids || [], statements, guard];
                }
                return [sym(op), id, params.ids || [], statements];
              },
          function(statements) {
                return statements;
              },
          function(params) {
                return params;
              },
          function() {
                return null;
              },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(param) { return param; },
          function(start, cont) {
                var ids = [];
                var guards = [];
                var items = [start].concat(cont);
                for ( var i = 0, len = items.length; i < len; i++ ) {
                  var paramDef = items[i];
                  var item = paramDef[0];
                  if ( isIdentifier(item) ) {
                    ids.push(item);
                    continue;
                  }
                  var idSym = paramDef[1] || sym(i, 'lit');
                  ids.push(idSym);
                  guards.push([sym('ma'), [sym('id'), idSym], item]);
                }
                return { ids: ids, guards: guards };
              },
          function(param) {
                return [param];
              },
          function(id) { return id; },
          function(param, alias) {
                if ( alias ) {
                  return [param, alias];
                }
                return [param];
              },
          function(op, path, imports) {
                return [sym(op), [[path, imports]]];
              },
          function(op, modules) {
                return [sym(op), modules];
              },
          function(item) { return item; },
          function(start, cont) {
                return sym([start].concat(cont).join('/'));
              },
          function(id) {
                return id;
              },
          function(start, cont) {
                return [start].concat(cont);
              },
          function(name, alias) {
                if ( alias ) {
                  return [name, alias];
                }
                return [name];
              },
          function(spec) { return spec; },
          function(path, alias) {
                if ( alias ) {
                  return [path, alias];
                }
                return [path];
              },
          function(op, ranges, statements, tail) {
                return [sym(op), ranges, statements, tail];
              },
          function(r) { return r; },
          function(id, col, guard) {
                if ( guard ) {
                  return [id, col, guard];
                }
                return [id, col];
              },
          function(op, expr, statements, tail) {
                if ( !op ) {
                  return [sym('if'), expr, tail, statements];
                }
                return [sym('if'), expr, statements, tail];
              },
          function(ifStatement) {
                return stmts([ifStatement]);
              },
          function() {
                return stmts([]);
              },
          function(op, a) {
              return [sym(op), a];
            },
          function(id, expr) {
                return [id, expr];
              },
          function(expr) { return [sym('ou'), expr]; },
          "|",
          { type: "literal", value: "|", description: "\"|\"" },
          function(args, calls) {
                if ( calls && calls.length ) {
                  // if it starts with an interpolation, we need to feed it 'self'
                  if ( isInterpolated(args) ) {
                    calls.unshift(args);
                    args = [sym('se', args)];
                  }
                  for ( var i = 0, len = calls.length; i < len; i++ ) {
                    args = [sym('ca'), calls[i], [args]];
                  }
                }
                else {
                  // or if it's an auto interpolation, we also feed it 'self'
                  if ( isInterpolated(args) && args.type === 'auto' ) {
                    args = [ sym('ca'), args, [[sym('se')]] ];
                  }
                }
                return args;
              },
          function(tval, op, cond, fval) {
                if ( !op ) {
                  return [sym('cn'), cond, fval, tval];
                }
                return [sym('cn'), cond, tval, fval];
              },
          function(op, r) { return [sym(op), r]; },
          function(head, tail) {
                return buildBinaryChain(head, tail);
              },
          function(op, expr) {
                if ( op === 'no' || !isInterpolated(expr) || expr.marked ) {
                  return [sym(op), expr];
                }

                if ( op === 'ne' || op === 'po' ) {
                  expr.type = op === 'ne' ? 'int' : 'auto';
                  expr.marked = true;
                  return expr;
                }

                // should not have gotten here
                expected("unary operator of '+' or '-'");
              },
          function(op, listInt) {
                if ( !hasOperator(listInt, 'ca') ) {
                  expected("bind to target a function or partial call");
                }
                return changeOperator(listInt, op);
              },
          function(str, list) {
                return [ sym('ca'), str, [list] ];
              },
          function(sel) { return sel; },
          function(elem) {
                return [sym('mb'), [sym(elem.value, 'lit')]];
              },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(elem) {
                return [sym('mb'), [elem]];
              },
          function(args) {
                return [sym('ca'), args];
              },
          function(elems) {
                return elems;
              },
          function() {
                return [];
              },
          function(comp) {
                return comp;
              },
          function(elems) {
                return [sym('ar'), elems];
              },
          function(elems) {
                return [sym('dc'), elems];
              },
          function() {
                return [sym('ar'), []];
              },
          function(name, value) {
                return [name, value];
              },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          function(name, value) {
                return [name, value]
              },
          function(expr, op, ranges) {
                return [sym('lc'), ranges, expr];
              },
          function(assign, op, ranges) {
                return [sym('lc'), ranges, assign[1], assign[0]];
              },
          function() { return sym(true, 'lit'); },
          function() { return sym(false, 'lit'); },
          function(id) {
                return [sym('id'), id];
              },
          function(op) {
                return [sym(op)];
              },
          function(op) {
                return sym(op, 'lit');
              }
        ],

        peg$bytecode = [
          peg$decode("7l"),
          peg$decode("!.!\"\"2!3\"+?$!87?9*$$\"\" #\"#  +'%4\"6$\" %$\"#  \"#  "),
          peg$decode("!.%\"\"2%3&+?$!87?9*$$\"\" #\"#  +'%4\"6'\" %$\"#  \"#  "),
          peg$decode("!.(\"\"2(3)+?$!87?9*$$\"\" #\"#  +'%4\"6*\" %$\"#  \"#  "),
          peg$decode("!.+\"\"2+3,+?$!87?9*$$\"\" #\"#  +'%4\"6*\" %$\"#  \"#  "),
          peg$decode("!.-\"\"2-3.+?$!87?9*$$\"\" #\"#  +'%4\"6/\" %$\"#  \"#  "),
          peg$decode("!.0\"\"2031+?$!87?9*$$\"\" #\"#  +'%4\"62\" %$\"#  \"#  "),
          peg$decode("!.3\"\"2334+?$!87?9*$$\"\" #\"#  +'%4\"65\" %$\"#  \"#  "),
          peg$decode("!.6\"\"2637+?$!87?9*$$\"\" #\"#  +'%4\"68\" %$\"#  \"#  "),
          peg$decode("!.9\"\"293:+?$!87?9*$$\"\" #\"#  +'%4\"6;\" %$\"#  \"#  "),
          peg$decode("!.<\"\"2<3=+?$!87?9*$$\"\" #\"#  +'%4\"6>\" %$\"#  \"#  "),
          peg$decode("!.?\"\"2?3@+?$!87?9*$$\"\" #\"#  +'%4\"6A\" %$\"#  \"#  "),
          peg$decode("!.B\"\"2B3C+?$!87?9*$$\"\" #\"#  +'%4\"6D\" %$\"#  \"#  "),
          peg$decode("!.E\"\"2E3F+?$!87?9*$$\"\" #\"#  +'%4\"6G\" %$\"#  \"#  "),
          peg$decode("!.H\"\"2H3I+?$!87?9*$$\"\" #\"#  +'%4\"6J\" %$\"#  \"#  "),
          peg$decode("!.K\"\"2K3L+?$!87?9*$$\"\" #\"#  +'%4\"6M\" %$\"#  \"#  "),
          peg$decode("!.N\"\"2N3O+?$!87?9*$$\"\" #\"#  +'%4\"6P\" %$\"#  \"#  "),
          peg$decode("!.Q\"\"2Q3R+?$!87?9*$$\"\" #\"#  +'%4\"6S\" %$\"#  \"#  "),
          peg$decode("!.T\"\"2T3U+?$!87?9*$$\"\" #\"#  +'%4\"6P\" %$\"#  \"#  "),
          peg$decode("!.V\"\"2V3W+?$!87?9*$$\"\" #\"#  +'%4\"6S\" %$\"#  \"#  "),
          peg$decode("!.X\"\"2X3Y+;$!87?9*$$\"\" #\"#  +#%'\"%$\"#  \"#  "),
          peg$decode("!.Z\"\"2Z3[+;$!87?9*$$\"\" #\"#  +#%'\"%$\"#  \"#  "),
          peg$decode("!.\\\"\"2\\3]+;$!87?9*$$\"\" #\"#  +#%'\"%$\"#  \"#  "),
          peg$decode("!.^\"\"2^3_+;$!87?9*$$\"\" #\"#  +#%'\"%$\"#  \"#  "),
          peg$decode("!.`\"\"2`3a*) \".b\"\"2b3c+?$!87?9*$$\"\" #\"#  +'%4\"6d\" %$\"#  \"#  "),
          peg$decode("!.e\"\"2e3f*) \".g\"\"2g3h+?$!87?9*$$\"\" #\"#  +'%4\"6i\" %$\"#  \"#  "),
          peg$decode("!.j\"\"2j3k*) \".l\"\"2l3m+;$!87?9*$$\"\" #\"#  +#%'\"%$\"#  \"#  "),
          peg$decode("7!*\xB3 \"7\"*\xAD \"7#*\xA7 \"7$*\xA1 \"7%*\x9B \"7&*\x95 \"7'*\x8F \"7(*\x89 \"7)*\x83 \"7**} \"7+*w \"78*q \"79*k \"7,*e \"7-*_ \"7.*Y \"7/*S \"70*M \"71*G \"72*A \"73*; \"74*5 \"75*/ \"76*) \"77*# \"7:"),
          peg$decode("!!87;9*$$\"\" #\"#  +2$7=+(%4\"6n\"! %$\"#  \"#  "),
          peg$decode("!7>+;$ o7?,#&7?\"+)%4\"6p\"\"! %$\"#  \"#  "),
          peg$decode("0q\"\"1!3r"),
          peg$decode("7>*) \"0s\"\"1!3t"),
          peg$decode("!7A+;$ o7B,#&7B\"+)%4\"6u\"\"! %$\"#  \"#  "),
          peg$decode("0v\"\"1!3w"),
          peg$decode("7A*) \"0x\"\"1!3y"),
          peg$decode("! o7D+&$,#&7D\"\"\"  +' 4!6z!! %"),
          peg$decode("0{\"\"1!3|"),
          peg$decode("!0}\"\"1!3~+\x87$0\"\"1!3\x80+w%0\x81\"\"1!3\x82+g%0\x83\"\"1!3\x84+W%0\x85\"\"1!3\x86+G%0\x87\"\"1!3\x88+7%0\x89\"\"1!3\x8A+'%4'6\x8B' %$'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("0x\"\"1!3y"),
          peg$decode("!0\x8C\"\"1!3\x8D+B$ o7F+&$,#&7F\"\"\"  +)%4\"6\x8E\"\"! %$\"#  \"#  *# \"7F"),
          peg$decode("!0\x89\"\"1!3\x8A+X$0\x90\"\"1!3\x91*# \" \x8F+B% o7F+&$,#&7F\"\"\"  +)%4#6\x92#\"! %$##  $\"#  \"#  "),
          peg$decode("!.\x93\"\"2\x933\x94+A$ o7F+&$,#&7F\"\"\"  +(%4\"6\x95\"! %$\"#  \"#  "),
          peg$decode("!7G+J$7I*# \" \x8F+:%7H*# \" \x8F+*%4#6\x96##\"! %$##  $\"#  \"#  "),
          peg$decode("-\"\"1!3\x97"),
          peg$decode("0\x98\"\"1!3\x99"),
          peg$decode("0\x9A\"\"1!3\x9B"),
          peg$decode("7M*6 \"!8-\"\"1!3\x979*$$\"\" #\"#  "),
          peg$decode("! o7L,#&7L\"+-$7P+#%'\"%$\"#  \"#  *@ \"! o7L,#&7L\"+-$7N+#%'\"%$\"#  \"#  "),
          peg$decode("!.\x9C\"\"2\x9C3\x9D+\x85$ o!!87N9*$$\"\" #\"#  +-$7K+#%'\"%$\"#  \"#  ,F&!!87N9*$$\"\" #\"#  +-$7K+#%'\"%$\"#  \"#  \"+-%7N+#%'#%$##  $\"#  \"#  "),
          peg$decode("7R*# \"7S"),
          peg$decode("!.\x9E\"\"2\x9E3\x9F+\xA4$7T*# \" \x8F+\x94% o!!87U9*$$\"\" #\"#  +2$7K+(%4\"6\xA0\"! %$\"#  \"#  ,K&!!87U9*$$\"\" #\"#  +2$7K+(%4\"6\xA0\"! %$\"#  \"#  \"+2%7U+(%4$6\xA1$!!%$$#  $##  $\"#  \"#  "),
          peg$decode("!.\xA2\"\"2\xA23\xA3+\xA4$7T*# \" \x8F+\x94% o!!87V9*$$\"\" #\"#  +2$7K+(%4\"6\xA0\"! %$\"#  \"#  ,K&!!87V9*$$\"\" #\"#  +2$7K+(%4\"6\xA0\"! %$\"#  \"#  \"+2%7V+(%4$6\xA4$!!%$$#  $##  $\"#  \"#  "),
          peg$decode("! o7L,#&7L\"+-$7M+#%'\"%$\"#  \"#  "),
          peg$decode("!7M*# \" \x8F+3$.\x9E\"\"2\x9E3\x9F+#%'\"%$\"#  \"#  "),
          peg$decode("!7M*# \" \x8F+3$.\xA2\"\"2\xA23\xA3+#%'\"%$\"#  \"#  "),
          peg$decode("!.\xA5\"\"2\xA53\xA6+7$.\xA5\"\"2\xA53\xA6+'%4\"6\xA7\" %$\"#  \"#  *\xD2 \"!.\xA8\"\"2\xA83\xA9+7$.\xA8\"\"2\xA83\xA9+'%4\"6\xA7\" %$\"#  \"#  *\xA7 \"!.\xA5\"\"2\xA53\xA6+Q$ o7X+&$,#&7X\"\"\"  +8%.\xA5\"\"2\xA53\xA6+(%4#6\xAA#!!%$##  $\"#  \"#  *b \"!.\xA8\"\"2\xA83\xA9+Q$ o7Y+&$,#&7Y\"\"\"  +8%.\xA8\"\"2\xA83\xA9+(%4#6\xAB#!!%$##  $\"#  \"#  "),
          peg$decode("0\xAC\"\"1!3\xAD*# \"7Z"),
          peg$decode("0\xAE\"\"1!3\xAF*# \"7Z"),
          peg$decode("!.\xB0\"\"2\xB03\xB1+& 4!6\xB2! %*\xBE \"!.\xB3\"\"2\xB33\xB4+& 4!6\xB5! %*\xA7 \"!.\xB6\"\"2\xB63\xB7+& 4!6\xB8! %*\x90 \"!.\xB9\"\"2\xB93\xBA+& 4!6\xBB! %*y \"!.\xBC\"\"2\xBC3\xBD+& 4!6\xBE! %*b \"!.\xBF\"\"2\xBF3\xC0+& 4!6\xC1! %*K \"!.\xC2\"\"2\xC23\xC3+& 4!6\xC4! %*4 \"!.\xC5\"\"2\xC53\xC6+& 4!6\xC7! %"),
          peg$decode("70*# \"71"),
          peg$decode("!.\xC8\"\"2\xC83\xC9+& 4!6\xCA! %"),
          peg$decode("!.\xCB\"\"2\xCB3\xCC+& 4!6\xCD! %"),
          peg$decode("!.\xCE\"\"2\xCE3\xCF+& 4!6\xD0! %"),
          peg$decode("!.\xD1\"\"2\xD13\xD2+& 4!6\xD3! %"),
          peg$decode("!.\xD4\"\"2\xD43\xD5+& 4!6\xD6! %"),
          peg$decode("!.\xD7\"\"2\xD73\xD8+& 4!6\xD9! %"),
          peg$decode("!.\xD1\"\"2\xD13\xD2+& 4!6\xDA! %"),
          peg$decode("!.\xCE\"\"2\xCE3\xCF+& 4!6\xDB! %"),
          peg$decode("!.\xDC\"\"2\xDC3\xDD+& 4!6\xDE! %"),
          peg$decode("7)*) \"7]*# \"7\\"),
          peg$decode("79*/ \"78*) \"7**# \"7+"),
          peg$decode("7^*# \"7_"),
          peg$decode("7`*) \"7a*# \"7,"),
          peg$decode("7b*) \"7c*# \"7."),
          peg$decode("! o!7L+& 4!6\xDF! %*4 \"!7M*# \"7P+& 4!6\xE0! %,E&!7L+& 4!6\xDF! %*4 \"!7M*# \"7P+& 4!6\xE0! %\"+' 4!6\xE1!! %"),
          peg$decode("! o7L,#&7L\"+& 4!6\xDF! %"),
          peg$decode("!7j+2$7m+(%4\"6\xE2\"! %$\"#  \"#  "),
          peg$decode("! o7n,#&7n\"+' 4!6\xE3!! %"),
          peg$decode("!7p*# \"7\x8F+3$7j+)%4\"6\xE4\"\"! %$\"#  \"#  *s \"!7q+h$!7k+2$7p+(%4\"6\xE5\"! %$\"#  \"#  *. \"!7O+& 4!6\xE6! %+3%7j+)%4#6\xE7#\"\"!%$##  $\"#  \"#  "),
          peg$decode("7p*) \"7q*# \"7\x8F"),
          peg$decode("7r*/ \"7s*) \"7y*# \"7t"),
          peg$decode("7z*5 \"7\x80*/ \"7\x87*) \"7\x8A*# \"7\x8C"),
          peg$decode("!.\xE8\"\"2\xE83\xE9+\xA6$ o!!8.\xEA\"\"2\xEA3\xEB9*$$\"\" #\"#  +2$7K+(%4\"6\xA0\"! %$\"#  \"#  ,Q&!!8.\xEA\"\"2\xEA3\xEB9*$$\"\" #\"#  +2$7K+(%4\"6\xA0\"! %$\"#  \"#  \"+8%.\xEA\"\"2\xEA3\xEB+(%4#6\xEC#!!%$##  $\"#  \"#  "),
          peg$decode("!.\xED\"\"2\xED3\xEE+`$7E+V%7k+L%7@+B%7k+8%.\xEF\"\"2\xEF3\xF0+(%4&6\xF1&!\"%$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.\xF2\"\"2\xF23\xF3+\x98$7j+\x8E%7u+\x84%7j+z% o!7x+2$7j+(%4\"6\xF4\"!!%$\"#  \"#  ,=&!7x+2$7j+(%4\"6\xF4\"!!%$\"#  \"#  \"+4%7w+*%4&6\xF5&##! %$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.\xF6\"\"2\xF63\xF7+V$7j+L%7\x90+B%7j+8%.\xF8\"\"2\xF83\xF9+(%4%6\xFA%!\"%$%#  $$#  $##  $\"#  \"#  *# \"7@"),
          peg$decode("!.\xF6\"\"2\xF63\xF7+V$7j+L%7\x90+B%7j+8%.\xF8\"\"2\xF83\xF9+(%4%6\xFA%!\"%$%#  $$#  $##  $\"#  \"#  *# \"7C"),
          peg$decode("!.\xFB\"\"2\xFB3\xFC+& 4!6\xFD! %*4 \"!.\xEF\"\"2\xEF3\xF0+& 4!6\xFE! %"),
          peg$decode("!7v+m$!7k+L$.\xFF\"\"2\xFF3\u0100+<%7j+2%7\x90+(%4$6\u0101$! %$$#  $##  $\"#  \"#  *# \" \x8F+)%4\"6\u0102\"\"! %$\"#  \"#  "),
          peg$decode("!.\u0103\"\"2\u01033\u0104+V$7j+L%7u+B%7j+8%.\xEF\"\"2\xEF3\xF0+(%4%6\u0105%!\"%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7\"+\x8E$7k+\x84%7<+z%7k+p%7}*# \" \x8F+`%!7j+2$7{+(%4\"6\u0106\"! %$\"#  \"#  *# \" \x8F+6%7|+,%4'6\u0107'%&$\"! %$'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7:+<$7k+2%7\x90+(%4#6\xFA#! %$##  $\"#  \"#  "),
          peg$decode("!7j+<$7m+2%77+(%4#6\u0108#!!%$##  $\"#  \"#  "),
          peg$decode("!.\xF6\"\"2\xF63\xF7+V$7j+L%7~+B%7j+8%.\xF8\"\"2\xF83\xF9+(%4%6\u0109%!\"%$%#  $$#  $##  $\"#  \"#  *R \"!.\xF6\"\"2\xF63\xF7+A$7j+7%.\xF8\"\"2\xF83\xF9+'%4#6\u010A# %$##  $\"#  \"#  "),
          peg$decode("!7+\xA3$ o!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7+(%4$6\u010D$! %$$#  $##  $\"#  \"#  ,W&!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7+(%4$6\u010D$! %$$#  $##  $\"#  \"#  \"+)%4\"6\u010E\"\"! %$\"#  \"#  "),
          peg$decode("!7<+' 4!6\u010F!! %*r \"!7\x90+g$!7k+F$74+<%7k+2%7<+(%4$6\u0110$! %$$#  $##  $\"#  \"#  *# \" \x8F+)%4\"6\u0111\"\"! %$\"#  \"#  "),
          peg$decode("!7#+f$7k+\\%7\x81+R%7j+H%7$+>%7k+4%7\x83+*%4'6\u0112'#&$ %$'#  $&#  $%#  $$#  $##  $\"#  \"#  *H \"!7$+=$7k+3%7\x85+)%4#6\u0113#\"\" %$##  $\"#  \"#  "),
          peg$decode("!7\x82+{$ o!.\x93\"\"2\x933\x94+2$7\x82+(%4\"6\u0114\"! %$\"#  \"#  ,C&!.\x93\"\"2\x933\x94+2$7\x82+(%4\"6\u0114\"! %$\"#  \"#  \"+)%4\"6\u0115\"\"! %$\"#  \"#  "),
          peg$decode("!!87;9*$$\"\" #\"#  +2$7=+(%4\"6\u0116\"! %$\"#  \"#  "),
          peg$decode("!7\x84+\xA3$ o!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x84+(%4$6\u0114$! %$$#  $##  $\"#  \"#  ,W&!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x84+(%4$6\u0114$! %$$#  $##  $\"#  \"#  \"+)%4\"6\u0117\"\"! %$\"#  \"#  "),
          peg$decode("!7<+g$!7k+F$74+<%7k+2%7<+(%4$6\u0110$! %$$#  $##  $\"#  \"#  *# \" \x8F+)%4\"6\u0118\"\"! %$\"#  \"#  "),
          peg$decode("!7\x86+\xA3$ o!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x86+(%4$6\u0119$! %$$#  $##  $\"#  \"#  ,W&!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x86+(%4$6\u0119$! %$$#  $##  $\"#  \"#  \"+)%4\"6\u0117\"\"! %$\"#  \"#  "),
          peg$decode("!7\x81+g$!7k+F$74+<%7k+2%7<+(%4$6\u0110$! %$$#  $##  $\"#  \"#  *# \" \x8F+)%4\"6\u011A\"\"! %$\"#  \"#  "),
          peg$decode("!7!+]$7k+S%7\x88+I%7j+?%7m+5%7\x8B++%4&6\u011B&$%#! %$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7\x89+\xA3$ o!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x89+(%4$6\u011C$! %$$#  $##  $\"#  \"#  ,W&!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x89+(%4$6\u011C$! %$$#  $##  $\"#  \"#  \"+)%4\"6\u0117\"\"! %$\"#  \"#  "),
          peg$decode("!7<+|$7k+r%75+h%7j+^%7\x90+T%!7j+2$7{+(%4\"6\u0106\"! %$\"#  \"#  *# \" \x8F+*%4&6\u011D&#%! %$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7[+]$7k+S%7\x90+I%7j+?%7m+5%7\x8B++%4&6\u011E&$%#! %$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!76+<$7k+2%7\x8A+(%4#6\u011F#! %$##  $\"#  \"#  *b \"!76+F$7j+<%7m+2%77+(%4$6\u0108$!!%$$#  $##  $\"#  \"#  *. \"!77+& 4!6\u0120! %"),
          peg$decode("!7&+=$7k+3%7\x8D+)%4#6\u0121#\"\" %$##  $\"#  \"#  "),
          peg$decode("!7\x8E+\xA3$ o!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x8E+(%4$6\xF4$! %$$#  $##  $\"#  \"#  ,W&!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x8E+(%4$6\xF4$! %$$#  $##  $\"#  \"#  \"+)%4\"6\u0117\"\"! %$\"#  \"#  "),
          peg$decode("!7<+W$7k+M%.\xFF\"\"2\xFF3\u0100+=%7j+3%7\x90+)%4%6\u0122%\"$ %$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7\x90+' 4!6\u0123!! %"),
          peg$decode("!7\x91+\xA3$ o!7k+L$.\u0124\"\"2\u01243\u0125+<%7j+2%7\x91+(%4$6\xA0$! %$$#  $##  $\"#  \"#  ,W&!7k+L$.\u0124\"\"2\u01243\u0125+<%7j+2%7\x91+(%4$6\xA0$! %$$#  $##  $\"#  \"#  \"+)%4\"6\u0126\"\"! %$\"#  \"#  "),
          peg$decode("!7\x92+{$7k+q%7[+g%7j+]%7\x92+S%7j+I%76+?%7j+5%7\x91++%4)6\u0127)$(&$ %$)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *# \"7\x92"),
          peg$decode("!7\x93+\x99$ o!7k+G$7(+=%7j+3%7\x93+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  ,R&!7k+G$7(+=%7j+3%7\x93+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  \"+)%4\"6\u0129\"\"! %$\"#  \"#  "),
          peg$decode("!7\x94+\x99$ o!7k+G$7'+=%7j+3%7\x94+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  ,R&!7k+G$7'+=%7j+3%7\x94+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  \"+)%4\"6\u0129\"\"! %$\"#  \"#  "),
          peg$decode("!7\x95+\x99$ o!7k+G$7e+=%7j+3%7\x95+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  ,R&!7k+G$7e+=%7j+3%7\x95+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  \"+)%4\"6\u0129\"\"! %$\"#  \"#  "),
          peg$decode("!7\x96+\x99$ o!7k+G$7f+=%7j+3%7\x96+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  ,R&!7k+G$7f+=%7j+3%7\x96+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  \"+)%4\"6\u0129\"\"! %$\"#  \"#  "),
          peg$decode("!7\x97+\x99$ o!7k+G$7g+=%7j+3%7\x97+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  ,R&!7k+G$7g+=%7j+3%7\x97+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  \"+)%4\"6\u0129\"\"! %$\"#  \"#  "),
          peg$decode("!7\x98+\x99$ o!7k+G$7h+=%7j+3%7\x98+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  ,R&!7k+G$7h+=%7j+3%7\x98+)%4$6\u0128$\"\" %$$#  $##  $\"#  \"#  \"+)%4\"6\u0129\"\"! %$\"#  \"#  "),
          peg$decode("!7i+=$7k+3%7\x98+)%4#6\u012A#\"\" %$##  $\"#  \"#  *# \"7\x99"),
          peg$decode("!7d+=$7k+3%7\x9A+)%4#6\u012B#\"\" %$##  $\"#  \"#  *# \"7\x9A"),
          peg$decode("!7\xA8+=$7k+3%7\x9F+)%4#6\u012C#\"\" %$##  $\"#  \"#  *# \"7\x9B"),
          peg$decode("!7\x9E+o$ o!7k+2$7\x9C+(%4\"6\u012D\"! %$\"#  \"#  ,=&!7k+2$7\x9C+(%4\"6\u012D\"! %$\"#  \"#  \"+)%4\"6\u0129\"\"! %$\"#  \"#  "),
          peg$decode("!.\x93\"\"2\x933\x94+<$7j+2%7<+(%4#6\u012E#! %$##  $\"#  \"#  *y \"!.\u012F\"\"2\u012F3\u0130+V$7j+L%7\x90+B%7j+8%.\u0131\"\"2\u01313\u0132+(%4%6\u0133%!\"%$%#  $$#  $##  $\"#  \"#  */ \"!7\x9D+' 4!6\u0134!! %"),
          peg$decode("!.\xF6\"\"2\xF63\xF7+V$7j+L%7\xA5+B%7j+8%.\xF8\"\"2\xF83\xF9+(%4%6\u0135%!\"%$%#  $$#  $##  $\"#  \"#  *R \"!.\xF6\"\"2\xF63\xF7+A$7j+7%.\xF8\"\"2\xF83\xF9+'%4#6\u0136# %$##  $\"#  \"#  "),
          peg$decode("7\x9F*# \"7\xA6"),
          peg$decode("!.\u012F\"\"2\u012F3\u0130+V$7j+L%7\xA2+B%7j+8%.\u0131\"\"2\u01313\u0132+(%4%6\u0137%!\"%$%#  $$#  $##  $\"#  \"#  *\xE6 \"!.\u012F\"\"2\u012F3\u0130+V$7j+L%7\xA5+B%7j+8%.\u0131\"\"2\u01313\u0132+(%4%6\u0138%!\"%$%#  $$#  $##  $\"#  \"#  *\x9C \"!.\u012F\"\"2\u012F3\u0130+V$7j+L%7\xA0+B%7j+8%.\u0131\"\"2\u01313\u0132+(%4%6\u0139%!\"%$%#  $$#  $##  $\"#  \"#  *R \"!.\u012F\"\"2\u012F3\u0130+A$7j+7%.\u0131\"\"2\u01313\u0132+'%4#6\u013A# %$##  $\"#  \"#  "),
          peg$decode("!7\xA1+\xA3$ o!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\xA1+(%4$6\xF4$! %$$#  $##  $\"#  \"#  ,W&!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\xA1+(%4$6\xF4$! %$$#  $##  $\"#  \"#  \"+)%4\"6\u0117\"\"! %$\"#  \"#  "),
          peg$decode("!7<+W$7k+M%.\xFF\"\"2\xFF3\u0100+=%7j+3%7\x90+)%4%6\u013B%\"$ %$%#  $$#  $##  $\"#  \"#  *b \"!7\x90+W$7k+M%.\u013C\"\"2\u013C3\u013D+=%7j+3%7\x90+)%4%6\u013E%\"$ %$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("7\xA3*# \"7\xA4"),
          peg$decode("!7\x90+R$7j+H%7!+>%7j+4%7\x88+*%4%6\u013F%#$\" %$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7\xA1+R$7j+H%7!+>%7j+4%7\x88+*%4%6\u0140%#$\" %$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7\x90+\xA3$ o!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x90+(%4$6\u0101$! %$$#  $##  $\"#  \"#  ,W&!7k+L$.\u010B\"\"2\u010B3\u010C+<%7j+2%7\x90+(%4$6\u0101$! %$$#  $##  $\"#  \"#  \"+)%4\"6\u0117\"\"! %$\"#  \"#  "),
          peg$decode("!.\xF6\"\"2\xF63\xF7+V$7j+L%7\x90+B%7j+8%.\xF8\"\"2\xF83\xF9+(%4%6\xFA%!\"%$%#  $$#  $##  $\"#  \"#  *# \"7\xA7"),
          peg$decode("7J*; \"7\xA8*5 \"7\xA9*/ \"7\xAA*) \"7\xAB*# \"7\xAC"),
          peg$decode("7Q*# \"7W"),
          peg$decode("!72+& 4!6\u0141! %*. \"!73+& 4!6\u0142! %"),
          peg$decode("!7<+' 4!6\u0143!! %"),
          peg$decode("!7-+' 4!6\u0144!! %"),
          peg$decode("!7/+' 4!6\u0145!! %")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


      var parser = require('../lib/compiler/parser');
      var buildBinaryChain = parser.buildBinaryChain;
      var hasOperator = parser.hasOperator;
      var changeOperator = parser.changeOperator;
      var symInterpolate = parser.symInterpolate;
      var isInterpolated = parser.isInterpolated;
      var isIdentifier = parser.isIdentifier;
      var stmts = parser.stmts;

      function sym(value, type) {
        return {
          value: value,
          type: type || 'op',
          line: line(),
          column: column()
        };
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();